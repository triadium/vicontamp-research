namespace MyGame
{
    // ѕеречисление дл€ разделени€ шин событий по ключам ("топикам").
    // —мотри класс CurvedAnimationView, MessagePipePubSub и GamePresenter.
    public enum AnimationSwitchEventSubscriber
    {
        First,
        Second
    }

    // —труктура событи€ дл€ передачи необходимых значений при обработке.
    // —пециально назвал неправильно, чтобы можно было оценить, что событие непон€тно о чЄм говорит.
    // ѕравильно назвать эту структуру не как Event, а как Intention, потому что
    // это событие распростран€ет информацию в системе о намерении переключить анимацию, но она Єще не переключена.
    // ј Event использовать только со свершившимис€ событи€ми, т.е. это и должен обработчик по завершению отправить.
    // Ќо тогда Event должен будет звучать так AnimationSwitch*ed*Event - т.е анимаци€ переключилась.
    // ј может быть событие AnimationSwitchCancel*ed*Event (отказ после проверки разрешени€, например) - и через адаптер
    // в UI откатить состо€ние, при этом отправить Intention о новом переключении, а все остальные должны правильно
    // обработать "возврат" - если положение "отключено" и пришло намерение "отключить", то ничего не делать.
    public struct AnimationSwitchEvent
    {
        // Ћучше использовать событи€ как иммутабельный источник значений.
        // ѕоэтому все данные должны инициализироватьс€ через конструктор и быть readonly.
        // » старатьс€ не использовать Unity структуры и классы при передачи событи€, чтобы уменьшить сложность тестировани€.
        public readonly bool isOn;

        public AnimationSwitchEvent(bool isOn)
        {
            this.isOn = isOn;
        }
    }
}