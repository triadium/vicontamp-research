namespace MyGame
{
    // Перечисление для разделения шин событий по ключам ("топикам").
    // Смотри класс CurvedAnimationView, MessagePipePubSub и GameController.
    public enum AnimationSwitchEventSubscriber
    {
        First,
        Second
    }

    // Структура события для передачи необходимых значений при обработке.
    // Специально назвал неправильно, чтобы можно было оценить, что событие непонятно о чём говорит.
    // Правильно назвать эту структуру не как Event, а как Intention, потому что
    // это событие распространяет информацию в системе о намерении переключить анимацию, но она ёще не переключена.
    // А Event использовать только со свершившимися событиями, т.е. это и должен обработчик по завершению отправить.
    // Но тогда Event должен будет звучать так AnimationSwitch*ed*Event - т.е анимация переключилась.
    // А может быть событие AnimationSwitchCancel*ed*Event (отказ после проверки разрешения, например) - и через адаптер
    // в UI откатить состояние, при этом отправить Intention о новом переключении, а все остальные должны правильно
    // обработать "возврат" - если положение "отключено" и пришло намерение "отключить", то ничего не делать.
    public struct AnimationSwitchEvent
    {
        // Лучше использовать события как иммутабельный источник значений.
        // Поэтому все данные должны инициализироваться через конструктор и быть readonly.
        // И стараться не использовать Unity структуры и классы при передачи события, чтобы уменьшить сложность тестирования.
        public readonly bool isOn;

        public AnimationSwitchEvent(bool isOn)
        {
            this.isOn = isOn;
        }
    }
}
